---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import TableOfContents from "@/components/TableOfContents.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content, headings = [] } = await render(post);
const showTOC = (post.data.academic || post.data.showTOC) && (headings?.length ?? 0) > 0;

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  const p = getPath(post.id, post.filePath);
  ogImageUrl = `${withBase(p)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

// Prefix site base for public assets when a leading slash is used
function withBase(url?: string) {
  if (!url) return url;
  const base = (import.meta.env.BASE_URL ?? "/").replace(/\/$/, "");
  if (url.startsWith("/")) return `${base}${url}`;
  return url;
}

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;

// Prepare JSON-LD for ScholarlyArticle when academic
let jsonLd: string | undefined;
if (post.data.academic) {
  const authorsArr = Array.isArray(post.data.authors)
    ? post.data.authors
        .map((a: any) => (typeof a === 'string' ? a : a?.name))
        .filter(Boolean)
    : (author ? [author] : []);
  const obj = {
    '@context': 'https://schema.org',
    '@type': 'ScholarlyArticle',
    headline: title,
    datePublished: pubDatetime?.toISOString?.() ?? String(pubDatetime ?? ''),
    author: authorsArr.map((n: string) => ({ '@type': 'Person', name: n })),
    sameAs: [post.data.codeUrl].filter(Boolean),
  } as any;
  try {
    jsonLd = JSON.stringify(obj);
  } catch {
    jsonLd = undefined;
  }
}
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      // Expand container on large screens to accommodate sidebar + article comfortably
      "mx-auto w-full max-w-[100rem] px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    {post.data.academic ? (
      <section class="paper-header">
        <h1 transition:name={slugifyStr(title)} class="paper-title">{title}</h1>
          {(() => {
            const authorsList = Array.isArray(post.data.authors) ? post.data.authors : [];
            const linkMap: any = {
              "Jiayi Zhang": "https://jiayizx.github.io/",
              "Simon Yu": "https://simonucl.github.io/",
              "Derek Chong": "https://www.linkedin.com/in/derekch",
              "Anthony Sicilia": "https://anthonysicilia.tech/",
              "Michael R. Tomz": "https://tomz.people.stanford.edu/",
              "Christopher D. Manning": "https://nlp.stanford.edu/~manning/",
              "Weiyan Shi": "https://wyshi.github.io/"
            };

            return authorsList.length > 0 ? (
             <>
               <p class="paper-authors">
                 <strong>
                   {authorsList.map((a: any, i: number) => {
                     const obj = typeof a === 'string' ? { name: a, aff: [] } : a;
                     const isLastInFirstLine = i === 3 && authorsList.length > 4;
                     const isEqualContribution = i < 3;
                     const authorLink = linkMap[obj.name];
                     
                     return (
                       <>
                         {authorLink ? (
                           <a href={authorLink} class="text-blue-400 dark:text-blue-400 hover:text-slate-800 dark:hover:text-slate-300 transition-colors">{obj.name}</a>
                         ) : (
                           obj.name
                         )}
                         {Array.isArray(obj.aff) && obj.aff.length ? <sup class="text-slate-500 dark:text-slate-500">{obj.aff.join(',')}</sup> : null}
                         {isEqualContribution && <sup class="text-slate-500 dark:text-slate-500">†</sup>}
                         {i < authorsList.length - 1 ? ', ' : ''}
                         {isLastInFirstLine && <br />}
                       </>
                     );
                   })}
                 </strong>
               </p>
               <p class="paper-equal-contrib" style="font-size: 0.85em; color: #666; margin-top: 0.25rem;">
                 † Equal contribution
               </p>
             </>
           ) : null 
          })()}
        {(() => { const affs = Array.isArray(post.data.affiliations) ? post.data.affiliations : []; return affs.length > 0 ? (
          <p class="paper-affils">
            {affs.map((a: string, i: number) => (
              <span><sup>{i + 1}</sup> {a}{i < affs.length - 1 ? ' · ' : ''}</span>
            ))}
          </p>
        ) : null })()}
        <div class="paper-meta-container">
          <div class="paper-meta-row">
            <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" /> · <span class="read-time">Estimated read time: 15 mins</span>
          </div>
          <div class="paper-meta-links">
            {post.data.homepageUrl && (
              <a href={String(post.data.homepageUrl)} target="_blank" rel="noopener noreferrer" class="paper-meta-link">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"/>
                  <polyline points="9 22 9 12 15 12 15 22"/>
                </svg>
                Homepage
              </a>
            )}
            {post.data.pdfUrl && (
              <a href={String(post.data.pdfUrl)} target="_blank" rel="noopener noreferrer" class="paper-meta-link">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                  <polyline points="14 2 14 8 20 8"/>
                  <line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/><polyline points="10 9 9 9 8 9"/>
                </svg>
                ArXiv
              </a>
            )}
            {post.data.codeUrl && (
              <a href={String(post.data.codeUrl)} target="_blank" rel="noopener noreferrer" class="paper-meta-link">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
                Code
              </a>
            )}
            {post.data.xThreadUrl && (
              <a href={String(post.data.xThreadUrl)} target="_blank" rel="noopener noreferrer" class="paper-meta-link">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
                </svg>
                X Thread
              </a>
            )}
            {post.data.notebookUrl && (
              <a href={String(post.data.notebookUrl)} target="_blank" rel="noopener noreferrer" class="paper-meta-link">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M2 6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V6z"/>
                  <path d="M6 10h12M6 14h8M6 18h6"/>
                </svg>
                Notebook
              </a>
            )}
            <button id="bibtex-button" class="paper-meta-link" style="cursor: pointer; border: none;">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"/>
                <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"/>
                <path d="M8 7h8M8 11h8"/>
              </svg>
              BibTeX
            </button>
          </div>
        </div>

        <div id="bibtex-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000; align-items: center; justify-content: center;">
          <div style="background: var(--color-background); padding: 2rem; border-radius: 0.5rem; max-width: 600px; width: 90%; position: relative; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
            <button id="close-modal" style="position: absolute; top: 1rem; right: 1rem; background: none; border: none; font-size: 1.5rem; cursor: pointer; color: var(--color-foreground);">&times;</button>
            <h3 style="margin-top: 0; margin-bottom: 1rem; color: var(--color-foreground);">Cite This Work</h3>
            <pre style="background: var(--playground-bg); padding: 1rem; border-radius: 0.25rem; overflow-x: auto; font-size: 0.85rem; position: relative;"><code id="bibtex-code">@misc{`{`}zhang2025verbalizedsamplingmitigatemode,
  title={`{`}Verbalized Sampling: How to Mitigate Mode Collapse and Unlock LLM Diversity{`}`},
  author={`{`}Jiayi Zhang and Simon Yu and Derek Chong and Anthony Sicilia and Michael R. Tomz and Christopher D. Manning and Weiyan Shi{`}`},
  year={`{`}2025{`}`},
  eprint={`{`}2510.01171{`}`},
  archivePrefix={`{`}arXiv{`}`},
  primaryClass={`{`}cs.CL{`}`},
  url={`{`}https://arxiv.org/abs/2510.01171{`}`}
{`}`}</code></pre>
            <button id="copy-bibtex" style="margin-top: 1rem; padding: 0.5rem 1rem; background: var(--color-accent); color: white; border: none; border-radius: 0.25rem; cursor: pointer; font-weight: 500;">Copy BibTeX</button>
          </div>
        </div>

        <script is:inline>
          document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('bibtex-modal');
            const openBtn = document.getElementById('bibtex-button');
            const closeBtn = document.getElementById('close-modal');
            const copyBtn = document.getElementById('copy-bibtex');
            const bibtexCode = document.getElementById('bibtex-code');

            openBtn?.addEventListener('click', () => {
              if (modal) modal.style.display = 'flex';
            });

            closeBtn?.addEventListener('click', () => {
              if (modal) modal.style.display = 'none';
            });

            modal?.addEventListener('click', (e) => {
              if (e.target === modal) {
                modal.style.display = 'none';
              }
            });

            copyBtn?.addEventListener('click', async () => {
              const text = bibtexCode?.textContent || '';
              try {
                await navigator.clipboard.writeText(text);
                copyBtn.textContent = 'Copied!';
                setTimeout(() => {
                  copyBtn.textContent = 'Copy BibTeX';
                }, 2000);
              } catch (err) {
                console.error('Failed to copy:', err);
              }
            });
          });
        </script>
        {post.data.abstract && (
          <section aria-labelledby="abstract">
            <div class="abstract abstract-box">
              <h2 id="abstract" class="abstract-heading">TL;DR</h2>
              <div set:html={post.data.abstract} />
            </div>
          </section>
        )}
      </section>
    ) : (
      <>
        <h1
          transition:name={slugifyStr(title)}
          class="inline-block text-2xl font-bold text-accent sm:text-3xl"
        >
          {title}
        </h1>
        <div class="my-2 flex items-center gap-2">
          <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
          <span
            aria-hidden="true"
            class:list={[
              "max-sm:hidden",
              { hidden: !SITE.editPost.enabled || hideEditPost },
            ]}>|</span
          >
          <EditPost {hideEditPost} {post} class="max-sm:hidden" />
        </div>
      </>
    )}
    {showTOC && (
      // Mobile / small screens: show ToC above the content
      <nav class="toc lg:hidden no-print" aria-labelledby="toc-heading-mobile">
        <h2 id="toc-heading-mobile" class="toc-heading">Table of Contents</h2>
        <TableOfContents headings={(headings ?? []).filter((h) => h.depth === 2 || h.depth === 3)} />
      </nav>
    )}
    {post.data.academic && jsonLd && (
      <script is:inline type="application/ld+json">{jsonLd}</script>
    )}
    <div class="lg:grid lg:grid-cols-[240px_1fr] lg:gap-12">
      {showTOC && (
        // Desktop / large screens: sticky left sidebar ToC
        <aside class="hidden lg:block">
          <nav
            class="toc lg:sticky lg:top-24 lg:max-h-[calc(100vh-7rem)] lg:overflow-auto no-print"
            aria-labelledby="toc-heading-aside"
          >
            <h2 id="toc-heading-aside" class="toc-heading">Table of Contents</h2>
            <TableOfContents
              headings={(headings ?? []).filter((h) => h.depth === 2 || h.depth === 3)}
            />
          </nav>
        </aside>
      )}

      <article
        id="article"
        class="app-prose mt-8 lg:mt-0 prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
      >
        <Content />
        {post.data.academic && (
          <div class="mt-12 pt-8 border-t border-border">
            <p class="text-base text-foreground">
              We're excited to share our results and welcome feedback from the community as we continue to scale VS to different areas. If you have any questions or feedback, please feel free to contact us at <code>yu.chi@northeastern.edu</code> or <code>zhang.jiayi12@northeastern.edu</code>.
            </p>
          </div>
        )}
      </article>
    </div>

    <hr class="my-8 border-dashed" />

    {!post.data.academic && <EditPost class="sm:hidden" {hideEditPost} {post} />}

    {!post.data.academic && (
      <ul class="mt-4 mb-8 sm:my-8">
        {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
      </ul>
    )}

    <BackToTopButton />

    {!post.data.academic && <ShareLinks />}

    <hr class="my-6 border-dashed" />

    {!post.data.academic && (
      <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={withBase(getPath(prevPost.id, prevPost.filePath))}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none rtl:rotate-180" />
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={withBase(getPath(nextPost.id, nextPost.filePath))}
            class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none rtl:rotate-180" />
          </a>
        )
      }
    </div>
    )}
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily. Replaced by SSR via rehype-slug/autolink. */

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      // Check if --file-name-offset custom property exists
      const computedStyle = getComputedStyle(codeBlock);
      const hasFileNameOffset =
        computedStyle.getPropertyValue("--file-name-offset").trim() !== "";

      // Determine the top positioning class
      const topClass = hasFileNameOffset
        ? "top-(--file-name-offset)"
        : "-top-3";

      const copyButton = document.createElement("button");
      copyButton.className = `copy-code absolute end-3 ${topClass} rounded bg-muted border border-muted px-2 py-1 text-xs leading-4 text-foreground font-medium`;
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );

  /* Add citation tooltips */
  function addCitationTooltips() {
    const citations = document.querySelectorAll('.app-prose a[href^="#ref-"]');
    const references = document.querySelector('#references');
    
    if (!references) return;
    
    citations.forEach(citation => {
      const refId = citation.getAttribute('href')?.substring(1);
      if (!refId) return;
      
      const refElement = document.getElementById(refId);
      if (!refElement) return;
      
      // Extract citation text
      const refText = refElement.textContent?.trim() || '';
      
      // Try to extract title (typically after year in Chicago style)
      let title = refText;
      
      // For Chicago Author-Date style: "Author. Year. Title. Journal..."
      // Extract just author, year, and title
      const match = refText.match(/^(.+?\d{4}[a-z]?)\.\s*(.+?)\./);
      if (match) {
        const authorYear = match[1];
        const paperTitle = match[2];
        title = `${authorYear}. ${paperTitle}`;
      }
      
      // Limit length
      if (title.length > 200) {
        title = title.substring(0, 197) + '...';
      }
      
      citation.setAttribute('data-citation-title', title);
    });
  }
  
  // Run on load and after page swaps
  addCitationTooltips();
  document.addEventListener('astro:after-swap', addCitationTooltips);
</script>
