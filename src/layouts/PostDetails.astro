---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import BackToTopButton from "@/components/BackToTopButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import { SITE } from "@/config";
import TableOfContents from "@/components/TableOfContents.astro";
import CiteThis from "@/components/CiteThis.astro";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

const { Content, headings = [] } = await render(post);
const showTOC = (post.data.academic || post.data.showTOC) && (headings?.length ?? 0) > 0;

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  ogImageUrl = initOgImage; // Remote OG image (absolute URL)
} else if (initOgImage?.src) {
  ogImageUrl = initOgImage.src; // Local asset
}

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  const p = getPath(post.id, post.filePath);
  ogImageUrl = `${withBase(p)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? new URL(ogImageUrl, Astro.url.origin).href
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

// Prefix site base for public assets when a leading slash is used
function withBase(url?: string) {
  if (!url) return url;
  const base = (import.meta.env.BASE_URL ?? "/").replace(/\/$/, "");
  if (url.startsWith("/")) return `${base}${url}`;
  return url;
}

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id, filePath }) => ({
  id,
  title,
  filePath,
}));

const currentPostIndex = allPosts.findIndex(a => a.id === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;

// Prepare JSON-LD for ScholarlyArticle when academic
let jsonLd: string | undefined;
if (post.data.academic) {
  const authorsArr = Array.isArray(post.data.authors)
    ? post.data.authors
        .map((a: any) => (typeof a === 'string' ? a : a?.name))
        .filter(Boolean)
    : (author ? [author] : []);
  const obj = {
    '@context': 'https://schema.org',
    '@type': 'ScholarlyArticle',
    headline: title,
    datePublished: pubDatetime?.toISOString?.() ?? String(pubDatetime ?? ''),
    author: authorsArr.map((n: string) => ({ '@type': 'Person', name: n })),
    sameAs: [post.data.codeUrl].filter(Boolean),
  } as any;
  try {
    jsonLd = JSON.stringify(obj);
  } catch {
    jsonLd = undefined;
  }
}
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      // Expand container on large screens to accommodate sidebar + article comfortably
      "mx-auto w-full max-w-[100rem] px-4 pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    {post.data.academic ? (
      <section class="paper-header">
        <h1 transition:name={slugifyStr(title)} class="paper-title">{title}</h1>
        {(() => { const authors = Array.isArray(post.data.authors) ? post.data.authors : []; return authors.length > 0 ? (
          <p class="paper-authors">
            <strong>
              {authors.map((a: any, i: number) => {
                const obj = typeof a === 'string' ? { name: a, aff: [] } : a;
                return (
                  <>
                    {obj.name}{Array.isArray(obj.aff) && obj.aff.length ? <sup>{obj.aff.join(',')}</sup> : null}
                    {i < authors.length - 1 ? ', ' : ''}
                  </>
                );
              })}
            </strong>
          </p>
        ) : null })()}
        {(() => { const affs = Array.isArray(post.data.affiliations) ? post.data.affiliations : []; return affs.length > 0 ? (
          <p class="paper-affils">
            {affs.map((a: string, i: number) => (
              <span><sup>{i + 1}</sup> {a}{i < affs.length - 1 ? ' 路 ' : ''}</span>
            ))}
          </p>
        ) : null })()}
        <p class="paper-meta">
          <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
          {post.data.pdfUrl && <> 路 <a href={withBase(String(post.data.pdfUrl))}>PDF</a></>}
          {post.data.codeUrl && <> 路 <a href={String(post.data.codeUrl)}>Code</a></>}
          {post.data.bibUrl && <> 路 <a href={withBase(String(post.data.bibUrl))} download>BibTeX</a></>}
          {post.data.bibUrl && <CiteThis bibUrl={String(post.data.bibUrl)} class="no-print" />}
        </p>
        {post.data.abstract && (
          <section aria-labelledby="abstract">
            <h2 id="abstract" class="abstract-heading">Abstract</h2>
            <div class="abstract abstract-box">{post.data.abstract}</div>
          </section>
        )}
      </section>
    ) : (
      <>
        <h1
          transition:name={slugifyStr(title)}
          class="inline-block text-2xl font-bold text-accent sm:text-3xl"
        >
          {title}
        </h1>
        <div class="my-2 flex items-center gap-2">
          <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" />
          <span
            aria-hidden="true"
            class:list={[
              "max-sm:hidden",
              { hidden: !SITE.editPost.enabled || hideEditPost },
            ]}>|</span
          >
          <EditPost {hideEditPost} {post} class="max-sm:hidden" />
        </div>
      </>
    )}
    {showTOC && (
      // Mobile / small screens: show ToC above the content
      <nav class="toc lg:hidden no-print" aria-labelledby="toc-heading-mobile">
        <h2 id="toc-heading-mobile" class="toc-heading">Table of Contents</h2>
        <TableOfContents headings={(headings ?? []).filter((h) => h.depth === 2 || h.depth === 3)} />
      </nav>
    )}
    {post.data.academic && jsonLd && (
      <script is:inline type="application/ld+json">{jsonLd}</script>
    )}
    <div class="lg:grid lg:grid-cols-[240px_1fr] lg:gap-12">
      {showTOC && (
        // Desktop / large screens: sticky left sidebar ToC
        <aside class="hidden lg:block">
          <nav
            class="toc lg:sticky lg:top-24 lg:max-h-[calc(100vh-7rem)] lg:overflow-auto no-print"
            aria-labelledby="toc-heading-aside"
          >
            <h2 id="toc-heading-aside" class="toc-heading">Table of Contents</h2>
            <TableOfContents
              headings={(headings ?? []).filter((h) => h.depth === 2 || h.depth === 3)}
            />
          </nav>
        </aside>
      )}

      <article
        id="article"
        class="app-prose mt-8 lg:mt-0 prose-pre:bg-(--shiki-light-bg) dark:prose-pre:bg-(--shiki-dark-bg)"
      >
        <Content />
      </article>
    </div>

    <hr class="my-8 border-dashed" />

    {!post.data.academic && <EditPost class="sm:hidden" {hideEditPost} {post} />}

    {!post.data.academic && (
      <ul class="mt-4 mb-8 sm:my-8">
        {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
      </ul>
    )}

    <BackToTopButton />

    {!post.data.academic && <ShareLinks />}

    <hr class="my-6 border-dashed" />

    {!post.data.academic && (
      <div data-pagefind-ignore class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={withBase(getPath(prevPost.id, prevPost.filePath))}
            class="flex w-full gap-1 hover:opacity-75"
          >
            <IconChevronLeft class="inline-block flex-none rtl:rotate-180" />
            <div>
              <span>Previous Post</span>
              <div class="text-sm text-accent/85">{prevPost.title}</div>
            </div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={withBase(getPath(nextPost.id, nextPost.filePath))}
            class="flex w-full justify-end gap-1 text-end hover:opacity-75 sm:col-start-2"
          >
            <div>
              <span>Next Post</span>
              <div class="text-sm text-accent/85">{nextPost.title}</div>
            </div>
            <IconChevronRight class="inline-block flex-none rtl:rotate-180" />
          </a>
        )
      }
    </div>
    )}
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily. Replaced by SSR via rehype-slug/autolink. */

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    const codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (const codeBlock of codeBlocks) {
      const wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      // Check if --file-name-offset custom property exists
      const computedStyle = getComputedStyle(codeBlock);
      const hasFileNameOffset =
        computedStyle.getPropertyValue("--file-name-offset").trim() !== "";

      // Determine the top positioning class
      const topClass = hasFileNameOffset
        ? "top-(--file-name-offset)"
        : "-top-3";

      const copyButton = document.createElement("button");
      copyButton.className = `copy-code absolute end-3 ${topClass} rounded bg-muted border border-muted px-2 py-1 text-xs leading-4 text-foreground font-medium`;
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      const code = block.querySelector("code");
      const text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>
